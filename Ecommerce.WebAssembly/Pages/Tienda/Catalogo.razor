@page "/"
@page "/catalogo"

@inject ICategoriaServicio categoriaServicio
@inject IProductoServicio productoServicio
@inject NavigationManager _navServicio
@inject IProductoServicio productoServicio

<div class="row justify-content-center mt-3 mb-4">

    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  ObtenerCatalogo())">
                <i class="oi oi-magnifying-glass"></i>
            </button>
            <select class="form-select ms-2" @onchange="OrdenarPorSeleccion">
                <option value="ascendente">Precio más bajo</option>
                <option value="descendente">Precio más alto</option>
                <option value="mejorDescuento">Mejor descuento</option>
            </select>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3">
        <div class="card">
            <div class="card-header text-white bg-dark">
                Rango de Precio
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <span class="input-group-text">Min</span>
                    <input type="number" class="form-control" @bind-value="precioMinimo" step="1" min="0" placeholder="0">
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Max</span>
                    <input type="number" class="form-control" @bind-value="precioMaximo" step="1" min="0" placeholder="1000">
                </div>
                <button class="btn btn-primary" @onclick="ObtenerCatalogo">Filtrar</button>
            </div>
        </div>
        <br />
        <div class="card">
            <div class="card-header text-white bg-dark">
                Categorias
            </div>
            <div class="card-body">
                @if (listaCategoria != null)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="categoria" id="Todos" value="Todos"
                               @onchange="RadioSeleccion"
                               checked=@(categoriaSeleccionada.Equals("Todos", StringComparison.OrdinalIgnoreCase))>
                        <label class="form-check-label" for="Todos">
                            Todos
                        </label>
                    </div>

                    @foreach (var item in listaCategoria)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="categoria" id="@item.IdCategoria" value="@item.Nombre"
                                   @onchange="RadioSeleccion"
                                   checked=@(categoriaSeleccionada.Equals(item.Nombre, StringComparison.OrdinalIgnoreCase))>
                            <label class="form-check-label" for="@item.IdCategoria">
                                @item.Nombre
                            </label>
                        </div>
                    }
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>

        </div>
        <br />
        <div class="card">
            <div class="card">
                <div class="card-header text-white bg-dark">
                    Filtros
                </div>
                <div class="card-body">
                    @if (listaFiltros != null && listaFiltros.Any())
                    {
                        @foreach (var filtro in listaFiltros)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@filtro.IdFiltro" />
                                <label class="form-check-label" for="@filtro.IdFiltro">
                                    @filtro.Nombre
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <span class="text-muted">No hay filtros disponibles para esta categoría.</span>
                    }
                </div>
            </div>

        </div>

    </div>

    <div class="col-sm-9">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @if (listaProducto != null)
            {
                @foreach (var item in listaProducto)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge-->
                            @if (DateTime.Now < item.FechaCreacion.Value.AddDays(30))
                            {
                                <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                            }
                            <!-- Product image
                            <img class="card-img-top border-dark border-1" src="@item.Imagen" style="width:100%;height:250px">-->
                            @if (item.Imagenes != null && item.Imagenes.Any())
                            {
                                <img class="card-img-top border-dark border-1" src="@item.Imagenes.First().RutaImagen" alt="Imagen del producto">
                            }
                            <!-- Product details-->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name-->
                                    <h5 class="fw-bolder">@item.Nombre</h5>
                                    <!-- Product price-->
                                    @if (item.PrecioOferta != 0 && item.PrecioOferta < item.Precio)
                                    {
                                        <span class="text-danger text-decoration-line-through">$@string.Format("{0:N2}", item.Precio)</span>
                                        <span>$@string.Format("{0:N2}", item.PrecioOferta)</span>
                                    }
                                    else
                                    {
                                        <span>$@string.Format("{0:N2}", item.Precio)</span>
                                    }
                                </div>
                            </div>
                            <!-- Product actions-->
                            <div class="card-footer p-3 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/detalle/@item.IdProducto">Ver producto</a></div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ProductoDTO>? listaProducto = null;
    private List<CategoriaDTO>? listaCategoria = null;
    private string buscar = "";
    private string categoriaSeleccionada = "Todos";
    private string ordenarPor = "asc";
    private decimal? precioMinimo = null;
    private decimal? precioMaximo = null;
    private List<FiltroDTO>? listaFiltros = null;

    private async Task ObtenerFiltros()
    {
        if (string.IsNullOrEmpty(categoriaSeleccionada) || categoriaSeleccionada.Equals("Todos", StringComparison.OrdinalIgnoreCase))
        {
            listaFiltros = new List<FiltroDTO>();
            return;
        }

        var response = await productoServicio.ObtenerFiltrosPorCategoria(categoriaSeleccionada);
        if (response.EsCorrecto)
        {
            listaFiltros = (List<FiltroDTO>)response.Resultado!;
        }
        else
        {
            listaFiltros = new List<FiltroDTO>();
        }
    }

    private async Task ObtenerCategorias(string Valor = "")
    {
        var response = await categoriaServicio.Lista(Valor);
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
        }
        else
        {
            listaCategoria = new List<CategoriaDTO>();
        }
    }

    private async Task ObtenerCatalogo()
    {
        var response = await productoServicio.Catalogo(categoriaSeleccionada, buscar);
        if (response.EsCorrecto)
        {
            listaProducto = (List<ProductoDTO>)response.Resultado!;

            if (precioMinimo.HasValue || precioMaximo.HasValue)
            {
                listaProducto = listaProducto.Where(p =>
                {
                    decimal precioActual = p.PrecioOferta.HasValue && p.PrecioOferta > 0
                                            ? p.PrecioOferta.Value
                                            : p.Precio ?? decimal.MaxValue;

                    bool cumpleMinimo = !precioMinimo.HasValue || precioActual >= precioMinimo.Value;
                    bool cumpleMaximo = !precioMaximo.HasValue || precioActual <= precioMaximo.Value;

                    return cumpleMinimo && cumpleMaximo;
                }).ToList();
            }

            if (ordenarPor == "ascendente")
            {
                // Ordena por el precio más bajo, considerando PrecioOferta si está presente y es mayor a 0
                listaProducto = listaProducto
                    .OrderBy(p => p.PrecioOferta.HasValue && p.PrecioOferta > 0
                                  ? Math.Min(p.Precio ?? decimal.MaxValue, p.PrecioOferta.Value)
                                  : p.Precio ?? decimal.MaxValue)
                    .ToList();
            }
            else if (ordenarPor == "descendente")
            {
                // Ordena por el precio más alto, considerando PrecioOferta si está presente y es mayor a 0
                listaProducto = listaProducto
                    .OrderByDescending(p => p.PrecioOferta.HasValue && p.PrecioOferta > 0
                                            ? Math.Min(p.Precio ?? decimal.MinValue, p.PrecioOferta.Value)
                                            : p.Precio ?? decimal.MinValue)
                    .ToList();
            }
            else if (ordenarPor == "mejorDescuento")
            {
                // Ordena primero por descuento, luego por precio en caso de que no tenga descuento
                listaProducto = listaProducto
                    .OrderByDescending(p => (p.PrecioOferta.HasValue && p.PrecioOferta > 0)
                                            ? (p.Precio - p.PrecioOferta.Value) 
                                            : decimal.MinValue) // Los productos sin descuento irán al final
                    .ThenBy(p => p.Precio) 
                    .ToList();
            }
        }
        else
        {
            listaProducto = new List<ProductoDTO>();
        }
    }



    private async Task RadioSeleccion(ChangeEventArgs args)
    {
        categoriaSeleccionada = args.Value?.ToString() ?? "Todos";
        buscar = "";
        await ObtenerCatalogo();
        await ObtenerFiltros();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ObtenerCategorias();
            await ObtenerFiltros();
            await ObtenerCatalogo();
        }
        catch (Exception ex)
        {
            // Aquí podrías utilizar BlazoredToast para mostrar un mensaje de error si lo deseas
            Console.WriteLine($"Error en OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task OrdenarPorSeleccion(ChangeEventArgs args)
    {
        ordenarPor = args.Value.ToString();
        await ObtenerCatalogo();
    }

}
