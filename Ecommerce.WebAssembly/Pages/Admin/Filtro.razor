@page "/filtro"
@page "/filtro/{Id:int}"

@inject IFiltroServicio filtroServicio
@inject ICategoriaServicio categoriaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "Administrador")];

<div class="row justify-content-center mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>

<div class="row justify-content-center mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        @if (modelo == null || listaCategorias == null)
        {
            <p>Cargando...</p>
        }
        else
        {
            <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="input-group mt-3">
                    <span class="input-group-text bg-light">Nombre</span>
                    <input type="text" class="form-control" @bind="modelo.Nombre" />
                </div>
                <ValidationMessage For="@(() => modelo.Nombre)" />

                <div class="input-group mt-3">
                    <span class="input-group-text bg-light">Tipo</span>
                    <select class="form-select" @bind="modelo.Tipo">
                        <option value="">-- Seleccionar tipo --</option>
                        <option value="Texto">Texto</option>
                        <option value="Numero">Número</option>
                        <option value="Booleano">Booleano</option>
                        <option value="Fecha">Fecha</option>
                    </select>
                </div>
                <ValidationMessage For="@(() => modelo.Tipo)" />

                <div class="mt-4">
                    <label class="form-label">Categorías asociadas</label>
                    @if (listaCategorias.Count == 0)
                    {
                        <p class="text-muted">No hay categorías disponibles.</p>
                    }
                    else
                    {
                        @foreach (var cat in listaCategorias)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       id="cat_@cat.IdCategoria"
                                       value="@cat.IdCategoria"
                                       checked="@modelo.CategoriaIds.Contains(cat.IdCategoria)"
                                       @onchange="(ChangeEventArgs e) => ToggleCategoria(cat.IdCategoria, (bool)e.Value)" />
                                <label class="form-check-label" for="cat_@cat.IdCategoria">@cat.Nombre</label>
                            </div>
                        }
                    }
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary me-2" style="width:130px">@boton</button>
                    <a href="/filtros" class="btn btn-secondary" style="width:130px">Volver</a>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private string Titulo = "Nuevo Filtro";
    private string boton = "Crear";

    // Inicializo con new para evitar null reference
    private FiltroDTO? modelo = new FiltroDTO();
    private List<CategoriaDTO> listaCategorias = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarCategorias();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Filtro";
            boton = "Actualizar";

            var response = await filtroServicio.Obtener(Id);
            if (response.EsCorrecto!)
            {
                modelo = (FiltroDTO)response.Resultado!;
                modelo.CategoriaIds ??= new List<int>();
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
        else
        {
            // Nuevo filtro: aseguro que CategoriaIds no sea null
            modelo = new FiltroDTO
            {
                CategoriaIds = new List<int>()
            };
        }
    }

    private async Task CargarCategorias()
    {
        var response = await categoriaServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaCategorias = (List<CategoriaDTO>)response.Resultado!;
        }
        else
        {
            listaCategorias = new List<CategoriaDTO>();
            toastService.ShowWarning("No se pudieron cargar las categorías");
        }
    }

    private void ToggleCategoria(int categoriaId, bool isChecked)
    {
        if (modelo == null)
            return;

        if (modelo.CategoriaIds == null)
            modelo.CategoriaIds = new List<int>();

        if (isChecked)
        {
            if (!modelo.CategoriaIds.Contains(categoriaId))
                modelo.CategoriaIds.Add(categoriaId);
        }
        else
        {
            modelo.CategoriaIds.Remove(categoriaId);
        }
    }

    private async Task GuardarCambios()
    {
        if (modelo == null)
            return;

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await filtroServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "El filtro fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            var response = await filtroServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "El filtro fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            _navServicio.NavigateTo("/filtros");
            toastService.ShowSuccess(mensaje);
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }
}
