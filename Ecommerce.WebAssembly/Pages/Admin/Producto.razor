@page "/producto"
@page "/producto/{Id:int}"

@inject ICategoriaServicio categoriaServicio
@inject IProductoServicio productoServicio
@inject IToastService toastService
@inject IFiltroServicio filtroServicio
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "Administrador")]

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Nombre -->
            <div class="input-group">
                <span class="input-group-text bg-light">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre" />
            </div>
            <ValidationMessage For="@(() => modelo.Nombre)" />

            <!-- Descripción -->
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Descripción</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>
            </div>
            <ValidationMessage For="@(() => modelo.Descripcion)" />

            <!-- Categoría -->
            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Categoría</label>
                <select class="form-select" @onchange="CambiarCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria" selected="@(item.IdCategoria == modelo.IdCategoria)">
                            @item.Nombre
                        </option>
                    }
                </select>
            </div>

            <!-- Filtros dinámicos -->
            @if (filtrosDisponibles.Any())
            {
                <div class="mt-4 ms-3">
                    <h5 class="mb-3">Filtros adicionales</h5>
                    @foreach (var filtro in filtrosDisponibles)
                    {
                        <div class="input-group mt-3">
                            <span class="input-group-text bg-light">@filtro.Nombre</span>

                            @if (filtro.EsRangoNumerico)
                            {
                                <input type="number" placeholder="Desde" class="form-control me-1"
                                       @bind="filtro.ValorDesde" />
                                <input type="number" placeholder="Hasta" class="form-control"
                                       @bind="filtro.ValorHasta" />
                            }
                            else if (filtro.OpcionesDisponibles != null && filtro.OpcionesDisponibles.Any())
                            {
                                <select class="form-select" @bind="filtro.ValorUnico">
                                    <option value="">Seleccione</option>
                                    @foreach (var opcion in filtro.OpcionesDisponibles)
                                    {
                                        <option value="@opcion">@opcion</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <input type="text" class="form-control" @bind="filtro.ValorUnico" />
                            }
                        </div>
                    }
                </div>
            }


            <!-- Precio -->
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio" />
            </div>
            <ValidationMessage For="@(() => modelo.Precio)" />

            <!-- Precio oferta -->
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta" />
            </div>
            <ValidationMessage For="@(() => modelo.PrecioOferta)" />

            <!-- Cantidad -->
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad" />
            </div>
            <ValidationMessage For="@(() => modelo.Cantidad)" />

            <!-- Imágenes -->
            <div class="mt-3">
                <InputFile multiple OnChange="Cambio"></InputFile>
            </div>

            <div style="display: flex; flex-wrap: wrap; gap: 10px;" class="mt-2">
                @foreach (var im in imagenes)
                {
                    <div style="position: relative;">
                        <img src="@im" width="200" height="200" style="border: 1px solid #ddd;" />
                        <button type="button" @onclick="(() => EliminarImagen(im))"
                                style="position: absolute; top: 5px; right: 5px; background-color: red; color: white; border: none; cursor: pointer; border-radius: 50%;">
                            X
                        </button>
                    </div>
                }
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private string Titulo = "Nuevo Producto";
    private string boton = "Crear";

    private List<CategoriaDTO> listaCategoria = new();
    private ProductoDTO modelo = new();
    private List<string> imagenes = new();
    private List<FiltroDTO> filtrosDisponibles = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await categoriaServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            if (Id == 0 && listaCategoria.Any())
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
                await CargarFiltrosPorCategoria();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            boton = "Actualizar";

            var response = await productoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (ProductoDTO)response.Resultado!;
                imagenes = modelo.Imagenes?.Select(x => x.RutaImagen)?.ToList() ?? new();

                await CargarFiltrosPorCategoria();
            }
        }
    }

    private async Task CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = int.TryParse(e.Value?.ToString(), out var id) ? id : (int?)null;
        await CargarFiltrosPorCategoria();
    }

    private async Task CargarFiltrosPorCategoria()
    {
        filtrosDisponibles.Clear();
        if (modelo.IdCategoria == null)
            return;

        var nombreCategoria = listaCategoria.FirstOrDefault(c => c.IdCategoria == modelo.IdCategoria)?.Nombre;
        if (string.IsNullOrWhiteSpace(nombreCategoria))
            return;

        var response = await productoServicio.ObtenerFiltrosPorCategoria(nombreCategoria);

        if (response.EsCorrecto)
        {
            filtrosDisponibles = (List<FiltroDTO>)response.Resultado!;

            if (Id != 0 && modelo.Filtros != null)
            {
                // Reasignar valores guardados
                foreach (var f in filtrosDisponibles)
                {
                    var valorGuardado = modelo.Filtros.FirstOrDefault(x => x.IdFiltro == f.IdFiltro)?.Valor;

                    if (f.EsRangoNumerico && valorGuardado?.Contains("|") == true)
                    {
                        var partes = valorGuardado.Split('|');
                        f.ValorDesde = decimal.TryParse(partes[0], out var desde) ? desde : null;
                        f.ValorHasta = decimal.TryParse(partes[1], out var hasta) ? hasta : null;
                    }
                    else
                    {
                        f.ValorUnico = valorGuardado;
                    }
                }
            }

            StateHasChanged();
        }
    }


    private async Task GuardarCambios()
    {
        // Validar filtros
        modelo.Filtros.Clear();
        foreach (var filtro in filtrosDisponibles)
        {
            string valor = "";

            if (filtro.EsRangoNumerico)
            {
                if (filtro.ValorDesde == null || filtro.ValorHasta == null)
                {
                    toastService.ShowWarning($"Completá el rango de '{filtro.Nombre}'");
                    return;
                }
                valor = $"{filtro.ValorDesde}|{filtro.ValorHasta}";
            }
            else
            {
                if (string.IsNullOrWhiteSpace(filtro.ValorUnico))
                {
                    toastService.ShowWarning($"Completá el filtro '{filtro.Nombre}'");
                    return;
                }
                valor = filtro.ValorUnico!;
            }

            modelo.Filtros.Add(new ProductoFiltroValorDTO
            {
                IdFiltro = filtro.IdFiltro,
                Valor = valor
            });
        }

        bool resultado = false;
        string mensaje;

        if (Id == 0)
        {
            modelo.Baja = false;
            var response = await productoServicio.Crear(modelo);
            resultado = response.EsCorrecto;
            mensaje = resultado ? "Producto creado con éxito" : "No se pudo crear el producto";
        }
        else
        {
            var response = await productoServicio.Editar(modelo);
            resultado = response.EsCorrecto;
            mensaje = resultado ? "Producto actualizado con éxito" : "No se pudo actualizar el producto";
        }

        if (resultado)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }

    async Task Cambio(InputFileChangeEventArgs e)
    {
        modelo.Imagenes ??= new();

        foreach (var file in e.GetMultipleFiles())
        {
            var fileInfo = new FileInfo(file.Name);
            if (fileInfo.Extension.ToLower() is ".jpg" or ".png")
            {
                var format = $"image/{fileInfo.Extension.Replace(".", "")}";
                var resized = await file.RequestImageFileAsync(format, 450, 300);
                var buffer = new byte[resized.Size];
                await resized.OpenReadStream().ReadAsync(buffer);
                var base64 = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

                imagenes.Add(base64);
                modelo.Imagenes.Add(new ProductoImagenDTO
                {
                    RutaImagen = base64,
                    NumeroImagen = modelo.Imagenes.Count + 1
                });
            }
            else
            {
                toastService.ShowWarning("Formato inválido. Solo .jpg o .png");
            }
        }
    }

    void EliminarImagen(string imagen)
    {
        int index = imagenes.IndexOf(imagen);
        if (index >= 0)
        {
            imagenes.RemoveAt(index);
            modelo.Imagenes?.RemoveAt(index);
        }
    }
}
