@page "/producto"
@page "/producto/{Id:int}"

@inject ICategoriaServicio categoriaServicio
@inject IProductoServicio productoServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "Administrador")];


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <!--<div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>-->

            <div class="input-group mt-3">
                @for (int i = 0; i < imagenesInputs.Count; i++)
                {
                    <div class="input-group mt-2">
                        <label class="input-group-text bg-light">Imagen @(i + 1)</label>
                        <InputFile class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="@(e => OnFileChange(e, i))"></InputFile>

                        @if (modelo.Imagenes != null && modelo.Imagenes.Count > i)
                        {
                            <div>
                                <img src="@modelo.Imagenes[i].RutaImagen" alt="Preview Imagen @(i + 1)" style="max-width: 100px; max-height: 100px;" />
                                <p>@modelo.Nombre</p> <!-- Mostrar el nombre del producto debajo de cada imagen -->
                            </div>
                        }

                        <button type="button" class="btn btn-danger" @onclick="() => RemoverImagen(i)">Remover</button>
                    </div>
                }
                <button type="button" class="btn btn-success mt-3" @onclick="AgregarImagen">Agregar Imagen</button>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nuevo Producto";
    private string boton = "Crear";

    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await categoriaServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            if (listaCategoria.Any() && Id == 0)
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            boton = "Actualizar";

            var response = await productoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (ProductoDTO)response.Resultado!;
                // Inicializa los inputs de imágenes con el número de imágenes cargadas
                imagenesInputs = modelo.Imagenes.Select(img => img.NumeroImagen).ToList();
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "El producto fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            var response = await productoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "El producto fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            _navServicio.NavigateTo("/productos");
            toastService.ShowSuccess(mensaje);
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }

    private List<int> imagenesInputs = new List<int> { 1 };
    private List<IBrowserFile> imagenesSeleccionadas = new List<IBrowserFile>();


    async Task OnFileChange(InputFileChangeEventArgs e, int index)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        // Asegurarse de que la lista de imágenes esté inicializada
        if (modelo.Imagenes == null)
        {
            modelo.Imagenes = new List<ProductoImagenDTO>();
        }

        // Verificar si la extensión del archivo es válida
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imagenData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            // Asegurarse de que no haya más imágenes de las que deberían
            if (modelo.Imagenes.Count > index)
            {
                modelo.Imagenes[index].RutaImagen = imagenData;  // Reemplazar la imagen existente
                modelo.Imagenes[index].NumeroImagen = index;
            }
            else
            {
                modelo.Imagenes.Add(new ProductoImagenDTO { RutaImagen = imagenData, NumeroImagen = index }); // Agregar nueva imagen a la lista
            }

            // Asegurarse de que imagenesSeleccionadas se mantenga sincronizada
            if (imagenesSeleccionadas.Count > index)
            {
                imagenesSeleccionadas[index] = e.File;
            }
            else
            {
                imagenesSeleccionadas.Add(e.File);
            }
        }
        else
        {
            toastService.ShowWarning("La extensión de la imagen debe ser '.png' o '.jpg'.");
        }
    }


    private void AgregarImagen()
    {
        imagenesInputs.Add(imagenesInputs.Count + 1); // Agregar un nuevo input para la imagen
    }


    private void RemoverImagen(int index)
    {
        if (imagenesInputs.Count > 1)
        {
            // Remover el input en la posición especificada
            imagenesInputs.RemoveAt(index-1);

            // Remover la imagen correspondiente del modelo solo si está dentro del rango de la lista
            if (modelo.Imagenes.Count > index)
            {
                modelo.Imagenes.RemoveAt(index); // Remover la imagen del modelo
            }

            // También debemos eliminar la imagen seleccionada si existe
            if (imagenesSeleccionadas.Count > index)
            {
                imagenesSeleccionadas.RemoveAt(index);
            }

            // Forzar una actualización del estado para reflejar visualmente los cambios
            StateHasChanged();
        }
    }


}
